/*
 * API de Produtos
 * API para gerenciar produtos em um inventário.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package example.micronaut.api;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import io.micronaut.http.HttpResponse;
import example.micronaut.model.Product;
import jakarta.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@Generated("io.micronaut.openapi.generator.JavaMicronautServerCodegen")
@Controller
@Tag(name = "Default", description = "The Default API")
public interface DefaultApi {

    /**
     * {@summary Listar Produtos}
     * Retorna uma lista de todos os produtos.
     *
     * @return List&lt;@Valid Product&gt;
     */
    @Operation(
        operationId = "productsGet",
        summary = "Listar Produtos",
        responses = @ApiResponse(responseCode = "200", description = "Lista de produtos", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class)))
    )
    @Get("/products")
    @Secured(SecurityRule.IS_ANONYMOUS)
    List<@Valid Product> productsGet();

    /**
     * {@summary Adicionar Novo Produto}
     * Adiciona um novo produto ao inventário.
     *
     * @param product (required)
     * @return HttpResponse&lt;@Valid Product&gt;
     */
    @Operation(
        operationId = "productsPost",
        summary = "Adicionar Novo Produto",
        responses = @ApiResponse(responseCode = "201", description = "Produto criado com sucesso", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class)))
    )
    @Post("/products")
    @Secured(SecurityRule.IS_ANONYMOUS)
    HttpResponse<@Valid Product> productsPost(
        @Body @NotNull @Valid Product product
    );

    /**
     * {@summary Excluir Produto}
     * Exclui um produto específico pelo ID.
     *
     * @param productId (required)
     * @return HttpResponse&lt;Void&gt;
     */
    @Operation(
        operationId = "productsProductIdDelete",
        summary = "Excluir Produto",
        responses = {
            @ApiResponse(responseCode = "204", description = "Produto excluído com sucesso"),
            @ApiResponse(responseCode = "404", description = "Produto não encontrado")
        }
    )
    @Delete("/products/{productId}")
    @Secured(SecurityRule.IS_ANONYMOUS)
    HttpResponse<Void> productsProductIdDelete(
        @PathVariable("productId") @NotNull Integer productId
    );

    /**
     * {@summary Obter Produto}
     * Retorna um produto específico pelo ID.
     *
     * @param productId (required)
     * @return Product
     */
    @Operation(
        operationId = "productsProductIdGet",
        summary = "Obter Produto",
        responses = {
            @ApiResponse(responseCode = "200", description = "Detalhes do produto", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))),
            @ApiResponse(responseCode = "404", description = "Produto não encontrado")
        }
    )
    @Get("/products/{productId}")
    @Secured(SecurityRule.IS_ANONYMOUS)
    Product productsProductIdGet(
        @PathVariable("productId") @NotNull Integer productId
    );

    /**
     * {@summary Atualizar Produto}
     * Atualiza as informações de um produto específico.
     *
     * @param productId (required)
     * @param product (required)
     * @return Product
     */
    @Operation(
        operationId = "productsProductIdPut",
        summary = "Atualizar Produto",
        responses = {
            @ApiResponse(responseCode = "200", description = "Produto atualizado com sucesso", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))),
            @ApiResponse(responseCode = "404", description = "Produto não encontrado")
        }
    )
    @Put("/products/{productId}")
    @Secured(SecurityRule.IS_ANONYMOUS)
    Product productsProductIdPut(
        @PathVariable("productId") @NotNull Integer productId,
        @Body @NotNull @Valid Product product
    );

}